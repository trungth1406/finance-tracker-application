/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.huutran.financetracker.api;

import com.huutran.financetracker.model.AccountRequest;
import com.huutran.financetracker.model.AccountResponse;
import com.huutran.financetracker.model.TransactionRequest;
import com.huutran.financetracker.model.TransactionResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-01-24T13:28:10.513Z[GMT]")
public interface AccountsApi {

    @Operation(summary = "Create a transaction from this account", description = "Create a transaction that made from this account ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Related transaction information", content = @Content(schema = @Schema(implementation = TransactionResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/{id}/related_transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TransactionResponse> createRelatedTransaction(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody TransactionRequest body);


    @Operation(summary = "delete account from resource", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Delete account"),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAccountWithID(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Delete transaction from account", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Transaction deleted"),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter"),
        
        @ApiResponse(responseCode = "500", description = "Internal error when trying to delete transaction") })
    @RequestMapping(value = "/accounts/{id}/related_transaction/{transaction_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRelatedTransaction(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("transaction_id") Integer transactionId);


    @Operation(summary = "get account by id", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(schema = @Schema(implementation = AccountResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AccountResponse> getAccountById(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "get all accounts", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(array = @ArraySchema(schema = @Schema(implementation = AccountResponse.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AccountResponse>> getAccounts();


    @Operation(summary = "Get all related transactions", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(array = @ArraySchema(schema = @Schema(implementation = TransactionResponse.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/{id}/related_transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TransactionResponse>> getRelatedTransaction(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Edit account of a resource", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(schema = @Schema(implementation = AccountResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<AccountResponse> updateAccountWithId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody AccountRequest body);


    @Operation(summary = "update a related transaction", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(schema = @Schema(implementation = TransactionResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/{id}/related_transaction/{transaction_id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<TransactionResponse> updateRelatedTransactions(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("transaction_id") Integer transactionId);

}

