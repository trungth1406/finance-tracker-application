/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.huutran.financetracker.api;

import com.huutran.financetracker.model.AccountRequest;
import com.huutran.financetracker.model.AccountResponse;
import com.huutran.financetracker.model.ResourceResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-01-24T13:28:10.513Z[GMT]")
public interface ResourcesApi {

    @Operation(summary = "", description = "Adds an item to the system", tags={ "resources" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "item created"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "409", description = "an existing item already exists") })
    @RequestMapping(value = "/resources/{id}/related_accounts",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addRelatedAccount(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "Add related account to resource", schema=@Schema()) @Valid @RequestBody AccountRequest body);


    @Operation(summary = "Get related accounts of a resource", description = "Get a single resource by its id", tags={ "resources" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(array = @ArraySchema(schema = @Schema(implementation = AccountResponse.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/resources/{id}/related_accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AccountResponse>> getRelatedAccounts(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "get all resources", description = "Get a single resource by its id", tags={ "resources" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(schema = @Schema(implementation = ResourceResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/resources/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResourceResponse> getResourceById(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "get all resources", description = "By passing in the appropriate options, you can search for available inventory in the system ", tags={ "resources" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "resources information", content = @Content(array = @ArraySchema(schema = @Schema(implementation = ResourceResponse.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/resources",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ResourceResponse>> getResources();


    @Operation(summary = "", description = "", tags={ "resources" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "item deleted successfully"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "500", description = "Fail to delete items") })
    @RequestMapping(value = "/resources/{id}/related_accounts/{account_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> resourcesIdRelatedAccountsAccountIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("account_id") Integer accountId);


    @Operation(summary = "", description = "editExistedAccount", tags={ "resources" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "item updated"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "409", description = "an existing item already exists") })
    @RequestMapping(value = "/resources/{id}/related_accounts/{account_id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRelatedAccount(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("account_id") Integer accountId, @Parameter(in = ParameterIn.DEFAULT, description = "Update existing account", schema=@Schema()) @Valid @RequestBody AccountRequest body);

}

